# OpenMemory MCP - Ger√ßek Mem0 Implementation
version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: ${APP_NAME:-openmemory}-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=openmemory
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-openmemory123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - "coolify.managed=true"
      - "coolify.name=${APP_NAME:-openmemory}-postgres"
    networks:
      - openmemory-network

  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: ${APP_NAME:-openmemory}-qdrant
    restart: unless-stopped
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - "coolify.managed=true"
      - "coolify.name=${APP_NAME:-openmemory}-qdrant"
    networks:
      - openmemory-network

  api:
    build:
      context: https://github.com/mem0ai/mem0.git#main
      dockerfile: openmemory/api/Dockerfile
    container_name: ${APP_NAME:-openmemory}-api
    restart: unless-stopped
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-openmemory123}@postgres:5432/openmemory
      - QDRANT_URL=http://qdrant:6333
      - HOST=0.0.0.0
      - PORT=8765
      - USER_ID=${USER_ID:-default_user}
    ports:
      - "8765:8765"
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8765/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    labels:
      - "coolify.managed=true"
      - "coolify.name=${APP_NAME:-openmemory}-api"
      # Traefik routing for API
      - "traefik.enable=true"
      - "traefik.http.routers.${APP_NAME:-openmemory}-api.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.${APP_NAME:-openmemory}-api.tls=true"
      - "traefik.http.routers.${APP_NAME:-openmemory}-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.${APP_NAME:-openmemory}-api.loadbalancer.server.port=8765"
      # MCP endpoint routing
      - "traefik.http.routers.${APP_NAME:-openmemory}-mcp.rule=Host(`${DOMAIN}`) && PathPrefix(`/mcp`)"
      - "traefik.http.routers.${APP_NAME:-openmemory}-mcp.tls=true"
      - "traefik.http.routers.${APP_NAME:-openmemory}-mcp.tls.certresolver=letsencrypt"
    networks:
      - openmemory-network

  ui:
    build:
      context: https://github.com/mem0ai/mem0.git#main
      dockerfile: openmemory/ui/Dockerfile
    container_name: ${APP_NAME:-openmemory}-ui
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=https://${DOMAIN}/api
      - NEXT_PUBLIC_USER_ID=${USER_ID:-default_user}
    ports:
      - "3000:3000"
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "coolify.managed=true"
      - "coolify.name=${APP_NAME:-openmemory}-ui"
      # Traefik routing for UI
      - "traefik.enable=true"
      - "traefik.http.routers.${APP_NAME:-openmemory}-ui.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.${APP_NAME:-openmemory}-ui.tls=true"
      - "traefik.http.routers.${APP_NAME:-openmemory}-ui.tls.certresolver=letsencrypt"
      - "traefik.http.services.${APP_NAME:-openmemory}-ui.loadbalancer.server.port=3000"
    networks:
      - openmemory-network

volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local

networks:
  openmemory-network:
    driver: bridge
    name: ${APP_NAME:-openmemory}-network
