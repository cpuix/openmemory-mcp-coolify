# OpenMemory MCP - Mem0 Official Setup
version: '3.8'

services:
  openmemory-setup:
    image: ubuntu:22.04
    container_name: ${APP_NAME:-openmemory}-setup
    restart: unless-stopped
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DOMAIN=${DOMAIN:-localhost}
      - USER_ID=${USER_ID:-default_user}
    ports:
      - "8765:8765"  # API
      - "3000:3000"  # UI Dashboard
      - "6333:6333"  # Qdrant Vector DB
      - "5432:5432"  # PostgreSQL
    volumes:
      - openmemory_data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    working_dir: /app
    command: |
      bash -c "
        echo 'ðŸš€ Setting up OpenMemory MCP...' &&
        
        # Install dependencies
        apt-get update -qq &&
        apt-get install -y curl git make docker.io docker-compose-plugin python3-pip &&
        
        # Clone Mem0 repository
        git clone https://github.com/mem0ai/mem0.git . &&
        cd openmemory &&
        
        # Create environment file
        cp api/.env.example api/.env &&
        echo 'OPENAI_API_KEY=${OPENAI_API_KEY}' > api/.env &&
        echo 'DATABASE_URL=postgresql://postgres:openmemory@postgres:5432/openmemory' >> api/.env &&
        echo 'QDRANT_URL=http://qdrant:6333' >> api/.env &&
        echo 'USER_ID=${USER_ID}' >> api/.env &&
        
        # Setup UI environment
        cp ui/.env.example ui/.env &&
        echo 'NEXT_PUBLIC_API_URL=https://${DOMAIN}/api' > ui/.env &&
        echo 'NEXT_PUBLIC_USER_ID=${USER_ID}' >> ui/.env &&
        
        echo 'ðŸ“¦ Building containers...' &&
        make build &&
        
        echo 'ðŸŽ¯ Starting services...' &&
        make up &&
        
        echo 'âœ… OpenMemory MCP is ready!' &&
        echo 'ðŸ“Š Dashboard: https://${DOMAIN}' &&
        echo 'ðŸ”Œ MCP Endpoint: https://${DOMAIN}/mcp' &&
        
        # Keep container running
        tail -f /dev/null
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8765/health", "||", "curl", "-f", "http://localhost:8765/api/health"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 300s
    labels:
      - "coolify.managed=true"
      - "coolify.name=${APP_NAME:-openmemory}-setup"
      # API routing
      - "traefik.enable=true"
      - "traefik.http.routers.${APP_NAME:-openmemory}-api.rule=Host(`${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/mcp`) || PathPrefix(`/health`) || PathPrefix(`/docs`))"
      - "traefik.http.routers.${APP_NAME:-openmemory}-api.tls=true"
      - "traefik.http.routers.${APP_NAME:-openmemory}-api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.${APP_NAME:-openmemory}-api.service=${APP_NAME:-openmemory}-api"
      - "traefik.http.services.${APP_NAME:-openmemory}-api.loadbalancer.server.port=8765"
      # UI routing
      - "traefik.http.routers.${APP_NAME:-openmemory}-ui.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.${APP_NAME:-openmemory}-ui.tls=true"
      - "traefik.http.routers.${APP_NAME:-openmemory}-ui.tls.certresolver=letsencrypt"
      - "traefik.http.routers.${APP_NAME:-openmemory}-ui.service=${APP_NAME:-openmemory}-ui"
      - "traefik.http.services.${APP_NAME:-openmemory}-ui.loadbalancer.server.port=3000"
    networks:
      - openmemory-network

volumes:
  openmemory_data:
    driver: local

networks:
  openmemory-network:
    driver: bridge
    name: ${APP_NAME:-openmemory}-network
